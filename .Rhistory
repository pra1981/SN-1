alpha <- -2 # skew
omega <- 2 # scale
delta <- alpha/sqrt(1+alpha^2) # coefficient
psi <- omega * delta # coefficient
y <- rsn(n = n, xi = xi, omega = omega, alpha = alpha) # simulated skew outcomes
qplot(x,y) + geom_line(aes(x = x, y = x))
# Generate Data
# set.seed(1801)
n <- 100 # number of observations
x <- rnorm(n) # random normal predictors
X <- cbind(1,x) # design matrix w/ intercept
beta <- c(0,2) # true beta vector: beta0, beta1
xi <- X %*% beta # location
alpha <- -2 # skew
omega <- 2 # scale
delta <- alpha/sqrt(1+alpha^2) # coefficient
psi <- omega * delta # coefficient
y <- rsn(n = n, xi = xi, omega = omega, alpha = alpha) # simulated skew outcomes
qplot(x,y) + geom_line(aes(x = x, y = x))
qplot(x,y) + geom_line(aes(x = x, y = 2*x))
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
mean(Alpha)
mean(Betastar[,1])
mean(Betastar[,2])
mean(Betastar[,3])
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
qplot(x,y) + geom_line(aes(x = x, y = x))
qplot(x,y) + geom_line(aes(x = x, y = 2*x))
mean(Alpha)
mean(Betastar[,1])
mean(Betastar[,2])
plot(1:lastit,Alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() + geom_line(aes(x = 1:lastit, y = Alpha))
ggplot() + geom_line(aes(x = 1:lastit, y = Alpha)) + geom_hline(yintercept = alpha)
ggplot() + geom_line(aes(x = 1:lastit, y = Betastar[,1])) + geom_hline(yintercept = beta[1])
ggplot() + geom_line(aes(x = 1:lastit, y = Betastar[,2])) + geom_hline(yintercept = beta[2])
mean(Betastar[,2])
ggplot() + geom_line(aes(x = 1:lastit, y = Betastar[,1])) + geom_hline(yintercept = beta[1]) + scale_y_continuous(limits = c(0,4))
ggplot() + geom_line(aes(x = 1:lastit, y = Betastar[,1])) + geom_hline(yintercept = beta[1]) + scale_y_continuous(limits = c(-2,4))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1]) +
scale_y_continuous(limits = c(-2,2))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1]) +
scale_y_continuous(limits = c(-2,1))
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
mean(Alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2]) +
scale_y_continuous(limits = c(-2,1))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2]) +
scale_y_continuous(limits = c(-4,4))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2]) +
scale_y_continuous(limits = c(-2.2,-1.8))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2]) +
scale_y_continuous(limits = c(1.8,2.2))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1]) +
scale_y_continuous(limits = c(-2,1))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1]) +
scale_y_continuous(limits = c(-2,1))
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
mean(Betastar[,2])
install.packages("beepR")
install.packages("beepr")
beep()
library(beepr)
beep()
beep(sound = "complete")
beep(sound = "ready")
beep(sound = "coin")
beep(sound = "mario")
beep(sound = "ping")
beep(sound = "shotgun")
beep(sound = "facebook")
beep(sound = "sword")
beep(sound = "ping")
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
###################################
# Linear Regression.r             #
# Linear Regression Gibbs Sampler #
# Includes Residual Diagnostics   #
# Outfiles: 1) I:\\Brian\\Bayesian Course\\Lectures\\Lecture Slides\\fig\\resid_density.pdf
#           2) I:\\Brian\\Bayesian Course\\Lectures\\Lecture Slides\\fig\\qq.pdf
#           3) I:\\Brian\\Bayesian Course\\SAS\\Data\\linreg.txt (for SAS)
# July 15, 2018                   #
###################################
library(mvtnorm)
#library(coda)            # For MCMC diagnostics
#################
# Generate data #
#################
set.seed(071518)
n<-1000                  # Sample size
x<-rnorm(n)              # Covariate
X<-cbind(1,x)            # Design matrix
p<-ncol(X)               # Number of regression coefs including intercept
beta<-c(-1,1)            # Reg Coefs
mu<-X%*%beta             # Mean
sigma2<-4                # Error variance
y<-rnorm(n,mu,sqrt(sigma2))
fit<-summary(lm(y~x))    # MLE fit for comparison
##########
# Priors #
##########
beta0<-rep(0,p)          # Prior mean of beta
T0<-diag(0.01,p)         # Prior Precision of beta
a<-b<-0.001              # Gamma hyperparms for taue
##########
# Inits  #
##########
taue<-1                  # Prior error precision
#################
# Store Samples #
#################
nsim<-1000               # Number of MCMC Iterations
thin<-1				          # Thinning interval
burn<-nsim/2	            # Burnin
lastit<-(nsim-burn)/thin	# Last stored value
Beta<-matrix(0,lastit,p)
Sigma2<-rep(0,lastit)
Resid<-matrix(0,lastit,n)# Store resids
Dy<-matrix(0,lastit,512) # Store density values for residual density plot
Qy<-matrix(0,lastit,100) # Store quantiles for QQ plot
#########
# Gibbs #
#########
tmp<-proc.time()
for (i in 1:nsim){
# Update beta
v<-solve(T0+taue*crossprod(X))
m<-v%*%(T0%*%beta0+taue*crossprod(X,y))
beta<-c(rmvnorm(1,m,v))
# Update tau
taue<-rgamma(1,a+n/2,b+crossprod(y-X%*%beta)/2)
#################
# Store Results #
#################
if (i> burn & i%%thin==0) {
j<-(i-burn)/thin
Beta[j,]<-beta
Sigma2[j]<-1/taue
Resid[j,]<-resid<-y-X%*%beta                     # Raw Resid
Dy[j,]<-density(resid/sd(resid),from=-5,to=5)$y  # Density of Standardized Resids
Qy[j,]<-quantile(resid/sd(resid),probs=seq(.001,.999,length=100)) # Quantiles for QQ Plot
}
if (i%%100==0) print(i)
}
run.time<-proc.time()-tmp # MCMC run time
###########
# Results #
###########
mbeta<-colMeans(Beta)
sbeta<-apply(Beta,2,sd)
qbeta<-apply(Beta,2,quantile,prob=c(0.025,0.975))
msigma2<-mean(Sigma2)
ssigma2<-sd(Sigma2)
qsigma2<-quantile(Sigma2,prob=c(0.025,0.975))
# Compare MLEs and
fit
cat("mbeta","\n",mbeta,"\n","sbeta","\n",sbeta,"\n","msigma2","\n",msigma2,"\n")
##########################################
# Density plot of standardized residuals #
##########################################
# pdf(file="I:\\Brian\\Bayesian Course\\Lectures\\Lecture Slides\\fig\\resids_normal.pdf")
par(mfrow=c(2,1))
resids<-rstandard(lm(y~x))        # Standardized resids
plot(density(resids),col="blue4",xlim=c(-5,5),lwd=2,main="Density Plot of Standardized Residuals", xlab="Quantile")
dy<-colMeans(Dy)
lines(seq(-5,5,length=512),dy,col="darkgreen",lty=2,lwd=2)
legend("topleft",col=c("blue4","darkgreen"),lty=c(1,2),legend=c("MLE","Bayes"))
#####################################
# QQ Plot of standardized residuals #
#####################################
qx<-qnorm(seq(.001,.999,length=100))
qy<-colMeans(Qy)
qqplot(qx,rstandard(lm(y~x)),col="darkred",lwd=2,ylim=c(-3,3),main="QQ Plot of Standardized Residuals",xlab="Normal Quantile",
ylab="Sample Quantiles")
points(qx,qy,col="darkgreen",lwd=2)
abline(0,1,col="blue4",lwd=2)
legend("topleft",col=c("darkred","darkgreen"),pch=1,lwd=2,lty=c(NA,NA),legend=c("MLE","Bayes"))
# dev.off()
##############
# Traceplots #
##############
par(mfrow=c(2,1))
plot(1:lastit,Beta[,2],type="l",col="lightgreen")
abline(h=mbeta[2],col="blue4")
plot(1:lastit,Sigma2,type="l",col="lightgreen")
abline(h=msigma2,col="blue4")
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
mean(Alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
mean(Alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
mean(Alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
mean(Alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
beepr::beep()
beepr::beep(sound = "mario")
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
mean(Alpha)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
mean(Alpha)
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
p1 <- ggplot() +
geom_line(aes(x = 1:lastit, y = Alpha)) +
geom_hline(yintercept = alpha)
p2 <- ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,1])) +
geom_hline(yintercept = beta[1])
p3 <- ggplot() +
geom_line(aes(x = 1:lastit, y = Betastar[,2])) +
geom_hline(yintercept = beta[2])
library(patchwork)
p1 + p2 + p3 + plot_layout(ncol = 1)
source('~/Documents/School/Fall_2018/Research/SN/sn_lin_regression-V2.R')
selm(y ~ x)
summary(selm(y ~ x))
parse("lambda")
print("∆")
expression("lambda")
expression(alpha)
coef(summary(selm(y ~ x)))
coef(selm(y ~ x)
)
confint(coef(selm(y ~ x)))
confint(selm(y ~ x))
warnings()
summary(selm(y ~ x))
extractSECdistr(selm(y ~ x))
ggplot() +
geom_line(aes(x = 1:lastit, y = Sigma2))
(omega^2)/(1+alpha^2)
ggplot() +
geom_line(aes(x = 1:lastit, y = Sigma2)) + geom_hline(yintercept = (omega^2)/(1+alpha^2))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],(omega^2)/(1+alpha^2),alpha)
kable(as.data.frame(cbind(params,truevals)))
knitr::opts_chunk$set(echo = TRUE)
library(patchwork)
library(knitr)
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],(omega^2)/(1+alpha^2),alpha)
kable(as.data.frame(cbind(params,truevals)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
kable(as.data.frame(cbind(params,truevals)))
summary(selm(y ~ x))
extractSECdistr(selm(y ~ x))
summary(selm(y ~ x))$coeffs
coeffs(summary(selm(y ~ x)))
coef(summary(selm(y ~ x)))
summary.selm(selm(y ~ x))
fit.MLE <- selm(y ~ x)
summary(fit.MLE)
extractSECdistr(fit.MLE)
fit.MLE[1]
str(fit.MLE)
str(fit.MLE)@coef
str(fit.MLE)@param
str(fit.MLE)@..param
slot(fit.MLE,call())
slot(fit.MLE,call)
getSlots(fit.MLE)
fit.MLE@call
fit.MLE@param
fit.MLE@param$dp
fit.MLE@param$dp[1]
fit.MLE@param$dp[2]
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
kable(as.data.frame(cbind(params,truevals)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
kable(as.data.frame(cbind(params,truevals)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
MLEs <- c(beta0MLE,beta1MLE,sig2MLE,alphaMLE)
kable(as.data.frame(cbind(params,truevals,MLEs)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
MLEs <- round(c(beta0MLE,beta1MLE,sig2MLE,alphaMLE),3)
kable(as.data.frame(cbind(params,truevals,MLEs)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
MLEs <- round(c(beta0MLE,beta1MLE,sig2MLE,alphaMLE),3)
beta0Bayes <- mean(Betastar[,1])
beta1Bayes <- mean(Betastar[,2])
alphaBayes <- mean(Alpha)
sig2Bayes <- mean(Sigma2)
Bayes <- round(c(beta0Bayes,beta1Bayes,alphaBayes,sig2Bayes),3)
kable(as.data.frame(cbind(params,truevals,MLEs)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
MLEs <- round(c(beta0MLE,beta1MLE,sig2MLE,alphaMLE),3)
beta0Bayes <- mean(Betastar[,1])
beta1Bayes <- mean(Betastar[,2])
alphaBayes <- mean(Alpha)
sig2Bayes <- mean(Sigma2)
Bayes <- round(c(beta0Bayes,beta1Bayes,alphaBayes,sig2Bayes),3)
kable(as.data.frame(cbind(params,truevals,MLEs,Bayes)))
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
MLEs <- round(c(beta0MLE,beta1MLE,sig2MLE,alphaMLE),3)
beta0Bayes <- mean(Betastar[,1])
beta1Bayes <- mean(Betastar[,2])
alphaBayes <- mean(Alpha)
sig2Bayes <- mean(Sigma2)
Bayes <- round(c(beta0Bayes,beta1Bayes,alphaBayes,sig2Bayes),3)
res.df <- as.data.frame(cbind(params,truevals,MLEs,Bayes))
rownames(res.df) <- NULL
kable(res.df)
params <- c("beta_0","beta_1","sigma2","alpha")
truevals <- c(beta[1],beta[2],round((omega^2)/(1+alpha^2),3),alpha)
beta0MLE <- fit.MLE@param$dp[1]
beta1MLE <- fit.MLE@param$dp[2]
omegaMLE <- fit.MLE@param$dp[3]
alphaMLE <- fit.MLE@param$dp[4]
sig2MLE <- (omegaMLE^2)/(1+alphaMLE^2)
MLEs <- round(c(beta0MLE,beta1MLE,sig2MLE,alphaMLE),3)
beta0Bayes <- mean(Betastar[,1])
beta1Bayes <- mean(Betastar[,2])
alphaBayes <- mean(Alpha)
sig2Bayes <- mean(Sigma2)
Bayes <- round(c(beta0Bayes,beta1Bayes,sig2Bayes,alphaBayes),3)
res.df <- as.data.frame(cbind(params,truevals,MLEs,Bayes))
rownames(res.df) <- NULL
kable(res.df)
ggplot() + geom_histogram(aes(x = Alpha))
ggplot() + geom_histogram(aes(x = Betastar[,1]))
ggplot() + geom_histogram(aes(x = Betastar[,2]))
ggplot() + geom_histogram(aes(x = Alpha))
